# Generated from Syl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,337,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,4,0,99,8,0,11,0,12,0,100,1,0,1,0,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,
        1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,38,276,8,38,10,38,12,38,
        279,9,38,1,38,1,38,1,39,1,39,3,39,285,8,39,1,40,1,40,1,40,1,40,1,
        40,3,40,292,8,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,300,8,41,1,42,
        1,42,5,42,304,8,42,10,42,12,42,307,9,42,1,43,1,43,1,43,1,43,3,43,
        313,8,43,1,44,4,44,316,8,44,11,44,12,44,317,1,45,1,45,1,45,1,45,
        1,45,1,45,3,45,326,8,45,1,46,1,46,1,46,4,46,331,8,46,11,46,12,46,
        332,1,47,1,47,1,47,0,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,47,95,48,1,0,8,3,0,9,10,13,13,32,32,
        2,0,34,34,92,92,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,
        1,0,48,48,2,0,88,88,120,120,3,0,48,57,65,70,97,102,358,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,1,98,1,0,0,0,3,104,1,0,0,0,5,108,1,0,0,0,
        7,112,1,0,0,0,9,116,1,0,0,0,11,120,1,0,0,0,13,124,1,0,0,0,15,128,
        1,0,0,0,17,131,1,0,0,0,19,134,1,0,0,0,21,137,1,0,0,0,23,140,1,0,
        0,0,25,143,1,0,0,0,27,146,1,0,0,0,29,150,1,0,0,0,31,153,1,0,0,0,
        33,157,1,0,0,0,35,160,1,0,0,0,37,162,1,0,0,0,39,164,1,0,0,0,41,166,
        1,0,0,0,43,168,1,0,0,0,45,170,1,0,0,0,47,172,1,0,0,0,49,177,1,0,
        0,0,51,183,1,0,0,0,53,187,1,0,0,0,55,196,1,0,0,0,57,202,1,0,0,0,
        59,205,1,0,0,0,61,213,1,0,0,0,63,219,1,0,0,0,65,224,1,0,0,0,67,229,
        1,0,0,0,69,232,1,0,0,0,71,236,1,0,0,0,73,240,1,0,0,0,75,248,1,0,
        0,0,77,253,1,0,0,0,79,284,1,0,0,0,81,291,1,0,0,0,83,299,1,0,0,0,
        85,301,1,0,0,0,87,312,1,0,0,0,89,315,1,0,0,0,91,325,1,0,0,0,93,327,
        1,0,0,0,95,334,1,0,0,0,97,99,7,0,0,0,98,97,1,0,0,0,99,100,1,0,0,
        0,100,98,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,0,102,103,6,0,0,0,
        103,2,1,0,0,0,104,105,5,35,0,0,105,106,1,0,0,0,106,107,6,1,0,0,107,
        4,1,0,0,0,108,109,5,97,0,0,109,110,5,100,0,0,110,111,5,100,0,0,111,
        6,1,0,0,0,112,113,5,115,0,0,113,114,5,117,0,0,114,115,5,98,0,0,115,
        8,1,0,0,0,116,117,5,109,0,0,117,118,5,117,0,0,118,119,5,108,0,0,
        119,10,1,0,0,0,120,121,5,100,0,0,121,122,5,105,0,0,122,123,5,118,
        0,0,123,12,1,0,0,0,124,125,5,109,0,0,125,126,5,111,0,0,126,127,5,
        100,0,0,127,14,1,0,0,0,128,129,5,101,0,0,129,130,5,113,0,0,130,16,
        1,0,0,0,131,132,5,110,0,0,132,133,5,101,0,0,133,18,1,0,0,0,134,135,
        5,103,0,0,135,136,5,116,0,0,136,20,1,0,0,0,137,138,5,108,0,0,138,
        139,5,116,0,0,139,22,1,0,0,0,140,141,5,103,0,0,141,142,5,101,0,0,
        142,24,1,0,0,0,143,144,5,108,0,0,144,145,5,101,0,0,145,26,1,0,0,
        0,146,147,5,97,0,0,147,148,5,110,0,0,148,149,5,100,0,0,149,28,1,
        0,0,0,150,151,5,111,0,0,151,152,5,114,0,0,152,30,1,0,0,0,153,154,
        5,110,0,0,154,155,5,111,0,0,155,156,5,116,0,0,156,32,1,0,0,0,157,
        158,5,58,0,0,158,159,5,61,0,0,159,34,1,0,0,0,160,161,5,123,0,0,161,
        36,1,0,0,0,162,163,5,125,0,0,163,38,1,0,0,0,164,165,5,40,0,0,165,
        40,1,0,0,0,166,167,5,41,0,0,167,42,1,0,0,0,168,169,5,59,0,0,169,
        44,1,0,0,0,170,171,5,44,0,0,171,46,1,0,0,0,172,173,5,118,0,0,173,
        174,5,111,0,0,174,175,5,105,0,0,175,176,5,100,0,0,176,48,1,0,0,0,
        177,178,5,66,0,0,178,179,5,69,0,0,179,180,5,71,0,0,180,181,5,73,
        0,0,181,182,5,78,0,0,182,50,1,0,0,0,183,184,5,69,0,0,184,185,5,78,
        0,0,185,186,5,68,0,0,186,52,1,0,0,0,187,188,5,102,0,0,188,189,5,
        117,0,0,189,190,5,110,0,0,190,191,5,99,0,0,191,192,5,116,0,0,192,
        193,5,105,0,0,193,194,5,111,0,0,194,195,5,110,0,0,195,54,1,0,0,0,
        196,197,5,112,0,0,197,198,5,114,0,0,198,199,5,105,0,0,199,200,5,
        110,0,0,200,201,5,116,0,0,201,56,1,0,0,0,202,203,5,105,0,0,203,204,
        5,102,0,0,204,58,1,0,0,0,205,206,5,114,0,0,206,207,5,101,0,0,207,
        208,5,116,0,0,208,209,5,117,0,0,209,210,5,114,0,0,210,211,5,110,
        0,0,211,212,5,115,0,0,212,60,1,0,0,0,213,214,5,119,0,0,214,215,5,
        104,0,0,215,216,5,105,0,0,216,217,5,108,0,0,217,218,5,101,0,0,218,
        62,1,0,0,0,219,220,5,116,0,0,220,221,5,104,0,0,221,222,5,101,0,0,
        222,223,5,110,0,0,223,64,1,0,0,0,224,225,5,101,0,0,225,226,5,108,
        0,0,226,227,5,115,0,0,227,228,5,101,0,0,228,66,1,0,0,0,229,230,5,
        102,0,0,230,231,5,105,0,0,231,68,1,0,0,0,232,233,5,101,0,0,233,234,
        5,110,0,0,234,235,5,100,0,0,235,70,1,0,0,0,236,237,5,105,0,0,237,
        238,5,110,0,0,238,239,5,116,0,0,239,72,1,0,0,0,240,241,5,98,0,0,
        241,242,5,111,0,0,242,243,5,111,0,0,243,244,5,108,0,0,244,245,5,
        101,0,0,245,246,5,97,0,0,246,247,5,110,0,0,247,74,1,0,0,0,248,249,
        5,114,0,0,249,250,5,101,0,0,250,251,5,97,0,0,251,252,5,108,0,0,252,
        76,1,0,0,0,253,277,5,34,0,0,254,255,5,92,0,0,255,276,5,110,0,0,256,
        257,5,92,0,0,257,276,5,116,0,0,258,259,5,92,0,0,259,276,5,118,0,
        0,260,261,5,92,0,0,261,276,5,97,0,0,262,263,5,92,0,0,263,276,5,98,
        0,0,264,265,5,92,0,0,265,276,5,102,0,0,266,267,5,92,0,0,267,276,
        5,114,0,0,268,269,5,92,0,0,269,276,5,92,0,0,270,271,5,92,0,0,271,
        276,5,34,0,0,272,273,5,92,0,0,273,276,5,63,0,0,274,276,8,1,0,0,275,
        254,1,0,0,0,275,256,1,0,0,0,275,258,1,0,0,0,275,260,1,0,0,0,275,
        262,1,0,0,0,275,264,1,0,0,0,275,266,1,0,0,0,275,268,1,0,0,0,275,
        270,1,0,0,0,275,272,1,0,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,
        275,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,
        281,5,34,0,0,281,78,1,0,0,0,282,285,3,81,40,0,283,285,3,83,41,0,
        284,282,1,0,0,0,284,283,1,0,0,0,285,80,1,0,0,0,286,292,5,84,0,0,
        287,288,5,84,0,0,288,289,5,82,0,0,289,290,5,85,0,0,290,292,5,69,
        0,0,291,286,1,0,0,0,291,287,1,0,0,0,292,82,1,0,0,0,293,300,5,70,
        0,0,294,295,5,70,0,0,295,296,5,65,0,0,296,297,5,76,0,0,297,298,5,
        83,0,0,298,300,5,69,0,0,299,293,1,0,0,0,299,294,1,0,0,0,300,84,1,
        0,0,0,301,305,7,2,0,0,302,304,7,3,0,0,303,302,1,0,0,0,304,307,1,
        0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,86,1,0,0,0,307,305,1,0,
        0,0,308,313,3,89,44,0,309,313,3,91,45,0,310,313,3,93,46,0,311,313,
        3,95,47,0,312,308,1,0,0,0,312,309,1,0,0,0,312,310,1,0,0,0,312,311,
        1,0,0,0,313,88,1,0,0,0,314,316,7,4,0,0,315,314,1,0,0,0,316,317,1,
        0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,90,1,0,0,0,319,320,3,89,
        44,0,320,321,5,46,0,0,321,322,3,89,44,0,322,326,1,0,0,0,323,324,
        5,46,0,0,324,326,3,89,44,0,325,319,1,0,0,0,325,323,1,0,0,0,326,92,
        1,0,0,0,327,328,7,5,0,0,328,330,7,6,0,0,329,331,7,7,0,0,330,329,
        1,0,0,0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,94,1,
        0,0,0,334,335,7,5,0,0,335,336,3,89,44,0,336,96,1,0,0,0,12,0,100,
        275,277,284,291,299,305,312,317,325,332,1,6,0,0
    ]

class SylLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    COMMENTS = 2
    PLUS = 3
    MINUS = 4
    MULTIPLY = 5
    DIVIDE = 6
    MODULE = 7
    EQUALS = 8
    NOT_EQUALS = 9
    GREATER_THAN = 10
    LESS_THAN = 11
    GREATER_EQUAL = 12
    LESS_EQUAL = 13
    AND = 14
    OR = 15
    NOT = 16
    ASSIGN = 17
    OPEN_BLOCK = 18
    CLOSE_BLOCK = 19
    OPEN_ARGUMENTS = 20
    CLOSE_ARGUMENTS = 21
    END_OF_INSTRUCTION = 22
    SEPARATOR = 23
    VOID = 24
    BEGIN = 25
    END = 26
    DEF_FUNC = 27
    ST_OUTPUT = 28
    IF = 29
    RETURN = 30
    WHILE = 31
    THEN = 32
    ELSE = 33
    END_FI = 34
    END_WHILE_FOR = 35
    INTEGER = 36
    BOOLEAN = 37
    DOUBLE = 38
    STRING = 39
    BOOLEAN_VALUES = 40
    TRUE = 41
    FALSE = 42
    ID = 43
    NUMBER = 44
    DECIMAL_NUMBER = 45
    FLOATING_NUMBER = 46
    HEX_NUMBER = 47
    OCTAL_NUMBER = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#'", "'add'", "'sub'", "'mul'", "'div'", "'mod'", "'eq'", 
            "'ne'", "'gt'", "'lt'", "'ge'", "'le'", "'and'", "'or'", "'not'", 
            "':='", "'{'", "'}'", "'('", "')'", "';'", "','", "'void'", 
            "'BEGIN'", "'END'", "'function'", "'print'", "'if'", "'returns'", 
            "'while'", "'then'", "'else'", "'fi'", "'end'", "'int'", "'boolean'", 
            "'real'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "COMMENTS", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULE", 
            "EQUALS", "NOT_EQUALS", "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", 
            "LESS_EQUAL", "AND", "OR", "NOT", "ASSIGN", "OPEN_BLOCK", "CLOSE_BLOCK", 
            "OPEN_ARGUMENTS", "CLOSE_ARGUMENTS", "END_OF_INSTRUCTION", "SEPARATOR", 
            "VOID", "BEGIN", "END", "DEF_FUNC", "ST_OUTPUT", "IF", "RETURN", 
            "WHILE", "THEN", "ELSE", "END_FI", "END_WHILE_FOR", "INTEGER", 
            "BOOLEAN", "DOUBLE", "STRING", "BOOLEAN_VALUES", "TRUE", "FALSE", 
            "ID", "NUMBER", "DECIMAL_NUMBER", "FLOATING_NUMBER", "HEX_NUMBER", 
            "OCTAL_NUMBER" ]

    ruleNames = [ "WS", "COMMENTS", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
                  "MODULE", "EQUALS", "NOT_EQUALS", "GREATER_THAN", "LESS_THAN", 
                  "GREATER_EQUAL", "LESS_EQUAL", "AND", "OR", "NOT", "ASSIGN", 
                  "OPEN_BLOCK", "CLOSE_BLOCK", "OPEN_ARGUMENTS", "CLOSE_ARGUMENTS", 
                  "END_OF_INSTRUCTION", "SEPARATOR", "VOID", "BEGIN", "END", 
                  "DEF_FUNC", "ST_OUTPUT", "IF", "RETURN", "WHILE", "THEN", 
                  "ELSE", "END_FI", "END_WHILE_FOR", "INTEGER", "BOOLEAN", 
                  "DOUBLE", "STRING", "BOOLEAN_VALUES", "TRUE", "FALSE", 
                  "ID", "NUMBER", "DECIMAL_NUMBER", "FLOATING_NUMBER", "HEX_NUMBER", 
                  "OCTAL_NUMBER" ]

    grammarFileName = "Syl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


